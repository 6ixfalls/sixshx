// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model File {
    resource     Resource @relation(fields: [slug], references: [slug])
    slug         String   @id
    mimetype     String
    extension    String
    originalName String   @map("original_name")

    vibrant String
    size    Int

    opengraphAuthor   String
    opengraphProvider String

    @@map("files")
}

model Link {
    resource Resource @relation(fields: [slug], references: [slug])
    slug     String   @id
    url      String
}

model Resource {
    id         String   @id @default(cuid())
    slug       String   @unique
    domain     Domain   @relation(fields: [domainHost], references: [host], onDelete: Cascade)
    domainHost String
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt
    timezone   String   @default("UTC+0")

    deleteToken String @unique @default(cuid()) @map("delete_token")

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    views Int @default(0)

    file File?
    link Link?

    @@index([slug])
    @@map("resources")
}

model Domain {
    host      String     @id
    resources Resource[]

    @@index([host])
    @@map("domains")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    apiKey        String?    @unique @default(cuid())
    accounts      Account[]
    sessions      Session[]
    resources     Resource[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
